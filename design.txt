Specification
=================
Design a vending machine using ruby. The vending machine should perform as follows:
Once an item is selected and the appropriate amount of money is inserted, the vending machine should return the correct product.
It should also return change if too much money is provided, or ask for more money if insufficient funds have been inserted.
The machine should take an initial load of products and change. The change will be of denominations 1p, 2p, 5p, 10p, 20p, 50p, £1, £2.
There should be a way of reloading either products or change at a later point.
The machine should keep track of the products and change that it contains.

1 = LIST OUT REQUIREMENTS
==========================
NB: Requirements are not given in the form of user stories.

R1 = Once an item is selected and the appropriate amount of money is inserted, the vending machine should return the correct product.

R2 = It should also return change if too much money is provided, or ask for more money if insufficient funds have been inserted.

R3 = The machine should take an initial load of products and change

R4 = The change will be of denominations 1p, 2p, 5p, 10p, 20p, 50p, £1, £2

R5 = There should be a way of reloading either products or change at a later point

R6 = The machine should keep track of the products and change that it contains

2 = LIST CLASSES
=================
NB: nouns with data and responsibility

R1 = vending machine([product, money], return_product)
R2 = vending machine(return_change, ask_for_money)
R3 = vending machine(load_initial_products, load_initial_change)
R4 =
R5 = vending machine(reload_products, reload_change)
R6 = vending machine(track_products, track_change)

3 = SEQUENCE DIAGRAMS - Focus on message passing
================================================
